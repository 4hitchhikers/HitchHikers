{"version":3,"file":"Observable.js","sourceRoot":"","sources":["../../src/Observable.ts"],"names":[],"mappings":"AAAA,sDAAsD;AACtD,+GAA+G;AAW/G,MAAM;IAIF,YAAY,OAAmB,EAAE,QAAqB;QAClD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAEM,OAAO;QACV,MAAM,KAAK,GAAW,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACpE,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACb,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACtC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;QACpD,CAAC;IACL,CAAC;CACJ;AAMD,MAAM;IAIF,YAAY,cAAmC;QAC3C,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACzC,CAAC;IAEM,IAAI,CAAC,IAAO;QACf,GAAG,CAAC,CAAC,MAAM,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACpC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxB,CAAC;IACL,CAAC;IAEM,KAAK,CAAC,GAAQ;QACjB,GAAG,CAAC,CAAC,MAAM,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACpC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;gBACjB,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACxB,CAAC;QACL,CAAC;IACL,CAAC;IAEM,QAAQ;QACX,GAAG,CAAC,CAAC,MAAM,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACpC,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACpB,QAAQ,CAAC,QAAQ,EAAE,CAAC;YACxB,CAAC;QACL,CAAC;IACL,CAAC;IAEM,SAAS,CAAC,QAAqB;QAClC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9B,MAAM,CAAC,IAAI,YAAY,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC5C,CAAC;CACJ","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// TODO: Seamless RxJs integration\r\n// From RxJs: https://github.com/ReactiveX/rxjs/blob/master/src/Observer.ts\r\nexport interface Observer<T> {\r\n    closed?: boolean;\r\n    next: (value: T) => void;\r\n    error?: (err: any) => void;\r\n    complete?: () => void;\r\n}\r\n\r\nexport class Subscription<T> {\r\n    private subject: Subject<T>;\r\n    private observer: Observer<T>;\r\n\r\n    constructor(subject: Subject<T>, observer: Observer<T>) {\r\n        this.subject = subject;\r\n        this.observer = observer;\r\n    }\r\n\r\n    public dispose(): void {\r\n        const index: number = this.subject.observers.indexOf(this.observer);\r\n        if (index > -1) {\r\n            this.subject.observers.splice(index, 1);\r\n        }\r\n\r\n        if (this.subject.observers.length === 0) {\r\n            this.subject.cancelCallback().catch((_) => { });\r\n        }\r\n    }\r\n}\r\n\r\nexport interface Observable<T> {\r\n    subscribe(observer: Observer<T>): Subscription<T>;\r\n}\r\n\r\nexport class Subject<T> implements Observable<T> {\r\n    public observers: Array<Observer<T>>;\r\n    public cancelCallback: () => Promise<void>;\r\n\r\n    constructor(cancelCallback: () => Promise<void>) {\r\n        this.observers = [];\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n\r\n    public next(item: T): void {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n\r\n    public error(err: any): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n\r\n    public subscribe(observer: Observer<T>): Subscription<T> {\r\n        this.observers.push(observer);\r\n        return new Subscription(this, observer);\r\n    }\r\n}\r\n"]}
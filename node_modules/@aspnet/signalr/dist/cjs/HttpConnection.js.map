{"version":3,"file":"HttpConnection.js","sourceRoot":"","sources":["../../src/HttpConnection.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { ConnectionClosed, DataReceived } from \"./Common\";\r\nimport { DefaultHttpClient, HttpClient } from \"./HttpClient\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { LoggerFactory } from \"./Loggers\";\r\nimport { ITransport, LongPollingTransport, ServerSentEventsTransport, TransferFormat, TransportType, WebSocketTransport } from \"./Transports\";\r\nimport { Arg } from \"./Utils\";\r\n\r\nexport interface IHttpConnectionOptions {\r\n    httpClient?: HttpClient;\r\n    transport?: TransportType | ITransport;\r\n    logger?: ILogger | LogLevel;\r\n    accessTokenFactory?: () => string;\r\n}\r\n\r\nconst enum ConnectionState {\r\n    Connecting,\r\n    Connected,\r\n    Disconnected,\r\n}\r\n\r\ninterface INegotiateResponse {\r\n    connectionId: string;\r\n    availableTransports: IAvailableTransport[];\r\n}\r\n\r\ninterface IAvailableTransport {\r\n    transport: keyof typeof TransportType;\r\n    transferFormats: Array<keyof typeof TransferFormat>;\r\n}\r\n\r\nexport class HttpConnection implements IConnection {\r\n    private connectionState: ConnectionState;\r\n    private baseUrl: string;\r\n    private url: string;\r\n    private readonly httpClient: HttpClient;\r\n    private readonly logger: ILogger;\r\n    private readonly options: IHttpConnectionOptions;\r\n    private transport: ITransport;\r\n    private connectionId: string;\r\n    private startPromise: Promise<void>;\r\n\r\n    public readonly features: any = {};\r\n\r\n    constructor(url: string, options: IHttpConnectionOptions = {}) {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this.logger = LoggerFactory.createLogger(options.logger);\r\n        this.baseUrl = this.resolveUrl(url);\r\n\r\n        options = options || {};\r\n        options.accessTokenFactory = options.accessTokenFactory || (() => null);\r\n\r\n        this.httpClient = options.httpClient || new DefaultHttpClient(this.logger);\r\n        this.connectionState = ConnectionState.Disconnected;\r\n        this.options = options;\r\n    }\r\n\r\n    public start(transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.logger.log(LogLevel.Trace, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n\r\n        if (this.connectionState !== ConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a connection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this.connectionState = ConnectionState.Connecting;\r\n\r\n        this.startPromise = this.startInternal(transferFormat);\r\n        return this.startPromise;\r\n    }\r\n\r\n    private async startInternal(transferFormat: TransferFormat): Promise<void> {\r\n        try {\r\n            if (this.options.transport === TransportType.WebSockets) {\r\n                // No need to add a connection ID in this case\r\n                this.url = this.baseUrl;\r\n                this.transport = this.constructTransport(TransportType.WebSockets);\r\n                // We should just call connect directly in this case.\r\n                // No fallback or negotiate in this case.\r\n                await this.transport.connect(this.url, transferFormat, this);\r\n            } else {\r\n                const token = this.options.accessTokenFactory();\r\n                let headers;\r\n                if (token) {\r\n                    headers = {\r\n                        [\"Authorization\"]: `Bearer ${token}`,\r\n                    };\r\n                }\r\n\r\n                const negotiateResponse = await this.getNegotiationResponse(headers);\r\n                // the user tries to stop the the connection when it is being started\r\n                if (this.connectionState === ConnectionState.Disconnected) {\r\n                    return;\r\n                }\r\n                await this.createTransport(this.options.transport, negotiateResponse, transferFormat, headers);\r\n            }\r\n\r\n            this.transport.onreceive = this.onreceive;\r\n            this.transport.onclose = (e) => this.stopConnection(true, e);\r\n\r\n            // only change the state if we were connecting to not overwrite\r\n            // the state if the connection is already marked as Disconnected\r\n            this.changeState(ConnectionState.Connecting, ConnectionState.Connected);\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this.connectionState = ConnectionState.Disconnected;\r\n            this.transport = null;\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    private async getNegotiationResponse(headers: any): Promise<INegotiateResponse> {\r\n        const negotiateUrl = this.resolveNegotiateUrl(this.baseUrl);\r\n        this.logger.log(LogLevel.Trace, `Sending negotiation request: ${negotiateUrl}`);\r\n        try {\r\n            const response =  await this.httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers,\r\n            });\r\n            return JSON.parse(response.content as string);\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Error, \"Failed to complete negotiation with the server: \" + e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    private updateConnectionId(negotiateResponse: INegotiateResponse) {\r\n        this.connectionId = negotiateResponse.connectionId;\r\n        this.url = this.baseUrl + (this.baseUrl.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${this.connectionId}`;\r\n    }\r\n\r\n    private async createTransport(requestedTransport: TransportType | ITransport, negotiateResponse: INegotiateResponse, requestedTransferFormat: TransferFormat, headers: any): Promise<void> {\r\n        this.updateConnectionId(negotiateResponse);\r\n        if (this.isITransport(requestedTransport)) {\r\n            this.logger.log(LogLevel.Trace, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this.transport.connect(this.url, requestedTransferFormat, this);\r\n\r\n            // only change the state if we were connecting to not overwrite\r\n            // the state if the connection is already marked as Disconnected\r\n            this.changeState(ConnectionState.Connecting, ConnectionState.Connected);\r\n            return;\r\n        }\r\n\r\n        const transports = negotiateResponse.availableTransports;\r\n        for (const endpoint of transports) {\r\n            this.connectionState = ConnectionState.Connecting;\r\n            const transport = this.resolveTransport(endpoint, requestedTransport, requestedTransferFormat);\r\n            if (typeof transport === \"number\") {\r\n                this.transport = this.constructTransport(transport);\r\n                if (negotiateResponse.connectionId === null) {\r\n                    negotiateResponse = await this.getNegotiationResponse(headers);\r\n                    this.updateConnectionId(negotiateResponse);\r\n                }\r\n                try {\r\n                    await this.transport.connect(this.url, requestedTransferFormat, this);\r\n                    this.changeState(ConnectionState.Connecting, ConnectionState.Connected);\r\n                    return;\r\n                } catch (ex) {\r\n                    this.logger.log(LogLevel.Error, `Failed to start the transport '${TransportType[transport]}': ${ex}`);\r\n                    this.connectionState = ConnectionState.Disconnected;\r\n                    negotiateResponse.connectionId = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        throw new Error(\"Unable to initialize any of the available transports.\");\r\n    }\r\n\r\n    private constructTransport(transport: TransportType) {\r\n        switch (transport) {\r\n            case TransportType.WebSockets:\r\n                return new WebSocketTransport(this.options.accessTokenFactory, this.logger);\r\n            case TransportType.ServerSentEvents:\r\n                return new ServerSentEventsTransport(this.httpClient, this.options.accessTokenFactory, this.logger);\r\n            case TransportType.LongPolling:\r\n                return new LongPollingTransport(this.httpClient, this.options.accessTokenFactory, this.logger);\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n\r\n    private resolveTransport(endpoint: IAvailableTransport, requestedTransport: TransportType, requestedTransferFormat: TransferFormat): TransportType | null {\r\n        const transport = TransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this.logger.log(LogLevel.Trace, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        } else {\r\n            const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n            if (!requestedTransport || transport === requestedTransport) {\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === TransportType.WebSockets && typeof WebSocket === \"undefined\") ||\r\n                        (transport === TransportType.ServerSentEvents && typeof EventSource === \"undefined\")) {\r\n                        this.logger.log(LogLevel.Trace, `Skipping transport '${TransportType[transport]}' because it is not supported in your environment.'`);\r\n                    } else {\r\n                        this.logger.log(LogLevel.Trace, `Selecting transport '${TransportType[transport]}'`);\r\n                        return transport;\r\n                    }\r\n                } else {\r\n                    this.logger.log(LogLevel.Trace, `Skipping transport '${TransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                }\r\n            } else {\r\n                this.logger.log(LogLevel.Trace, `Skipping transport '${TransportType[transport]}' because it was disabled by the client.`);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private isITransport(transport: any): transport is ITransport {\r\n        return typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n\r\n    private changeState(from: ConnectionState, to: ConnectionState): boolean {\r\n        if (this.connectionState === from) {\r\n            this.connectionState = to;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public send(data: any): Promise<void> {\r\n        if (this.connectionState !== ConnectionState.Connected) {\r\n            throw new Error(\"Cannot send data if the connection is not in the 'Connected' State.\");\r\n        }\r\n\r\n        return this.transport.send(data);\r\n    }\r\n\r\n    public async stop(error?: Error): Promise<void> {\r\n        const previousState = this.connectionState;\r\n        this.connectionState = ConnectionState.Disconnected;\r\n\r\n        try {\r\n            await this.startPromise;\r\n        } catch (e) {\r\n            // this exception is returned to the user as a rejected Promise from the start method\r\n        }\r\n        this.stopConnection(/*raiseClosed*/ previousState === ConnectionState.Connected, error);\r\n    }\r\n\r\n    private stopConnection(raiseClosed: boolean, error?: Error) {\r\n        if (this.transport) {\r\n            this.transport.stop();\r\n            this.transport = null;\r\n        }\r\n\r\n        if (error) {\r\n            this.logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        } else {\r\n            this.logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n\r\n        this.connectionState = ConnectionState.Disconnected;\r\n\r\n        if (raiseClosed && this.onclose) {\r\n            this.onclose(error);\r\n        }\r\n    }\r\n\r\n    private resolveUrl(url: string): string {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n\r\n        if (typeof window === \"undefined\" || !window || !window.document) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n\r\n        const parser = window.document.createElement(\"a\");\r\n        parser.href = url;\r\n\r\n        const baseUrl = (!parser.protocol || parser.protocol === \":\")\r\n            ? `${window.document.location.protocol}//${(parser.host || window.document.location.host)}`\r\n            : `${parser.protocol}//${parser.host}`;\r\n\r\n        if (!url || url[0] !== \"/\") {\r\n            url = \"/\" + url;\r\n        }\r\n\r\n        const normalizedUrl = baseUrl + url;\r\n        this.logger.log(LogLevel.Information, `Normalizing '${url}' to '${normalizedUrl}'.`);\r\n        return normalizedUrl;\r\n    }\r\n\r\n    private resolveNegotiateUrl(url: string): string {\r\n        const index = url.indexOf(\"?\");\r\n        let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\r\n        if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\r\n            negotiateUrl += \"/\";\r\n        }\r\n        negotiateUrl += \"negotiate\";\r\n        negotiateUrl += index === -1 ? \"\" : url.substring(index);\r\n        return negotiateUrl;\r\n    }\r\n\r\n    public onreceive: DataReceived;\r\n    public onclose: ConnectionClosed;\r\n}\r\n"]}
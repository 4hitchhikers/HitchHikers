{"version":3,"file":"IHubProtocol.js","sourceRoot":"","sources":["../../src/IHubProtocol.ts"],"names":[],"mappings":"","sourcesContent":["import { ILogger } from \"./ILogger\";\r\nimport { TransferFormat } from \"./Transports\";\r\n\r\n// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nexport const enum MessageType {\r\n    Invocation = 1,\r\n    StreamItem = 2,\r\n    Completion = 3,\r\n    StreamInvocation = 4,\r\n    CancelInvocation = 5,\r\n    Ping = 6,\r\n    Close = 7,\r\n}\r\n\r\nexport interface MessageHeaders { [key: string]: string; }\r\n\r\nexport type HubMessage = InvocationMessage | StreamInvocationMessage | StreamItemMessage | CompletionMessage | CancelInvocationMessage | PingMessage | CloseMessage;\r\n\r\nexport interface HubMessageBase {\r\n    readonly type: MessageType;\r\n}\r\n\r\nexport interface HubInvocationMessage extends HubMessageBase {\r\n    readonly headers?: MessageHeaders;\r\n    readonly invocationId?: string;\r\n}\r\n\r\nexport interface InvocationMessage extends HubInvocationMessage {\r\n    readonly type: MessageType.Invocation;\r\n    readonly target: string;\r\n    readonly arguments: any[];\r\n}\r\n\r\nexport interface StreamInvocationMessage extends HubInvocationMessage {\r\n    readonly type: MessageType.StreamInvocation;\r\n    readonly target: string;\r\n    readonly arguments: any[];\r\n}\r\n\r\nexport interface StreamItemMessage extends HubInvocationMessage {\r\n    readonly type: MessageType.StreamItem;\r\n    readonly item?: any;\r\n}\r\n\r\nexport interface CompletionMessage extends HubInvocationMessage {\r\n    readonly type: MessageType.Completion;\r\n    readonly error?: string;\r\n    readonly result?: any;\r\n}\r\n\r\nexport interface HandshakeRequestMessage {\r\n    readonly protocol: string;\r\n    readonly version: number;\r\n}\r\n\r\nexport interface HandshakeResponseMessage {\r\n    readonly error: string;\r\n}\r\n\r\nexport interface PingMessage extends HubMessageBase {\r\n    readonly type: MessageType.Ping;\r\n}\r\n\r\nexport interface CloseMessage extends HubMessageBase {\r\n    readonly type: MessageType.Close;\r\n    readonly error?: string;\r\n}\r\n\r\nexport interface CancelInvocationMessage extends HubInvocationMessage {\r\n    readonly type: MessageType.CancelInvocation;\r\n}\r\n\r\nexport interface IHubProtocol {\r\n    readonly name: string;\r\n    readonly version: number;\r\n    readonly transferFormat: TransferFormat;\r\n    parseMessages(input: any, logger: ILogger): HubMessage[];\r\n    writeMessage(message: HubMessage): any;\r\n}\r\n"]}
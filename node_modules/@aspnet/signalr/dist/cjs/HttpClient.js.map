{"version":3,"file":"HttpClient.js","sourceRoot":"","sources":["../../src/HttpClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortSignal } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\nexport interface HttpRequest {\r\n    method?: string;\r\n    url?: string;\r\n    content?: string | ArrayBuffer;\r\n    headers?: { [key: string]: string };\r\n    responseType?: XMLHttpRequestResponseType;\r\n    abortSignal?: AbortSignal;\r\n    timeout?: number;\r\n}\r\n\r\nexport class HttpResponse {\r\n    constructor(statusCode: number, statusText: string, content: string);\r\n    constructor(statusCode: number, statusText: string, content: ArrayBuffer);\r\n    constructor(\r\n        public readonly statusCode: number,\r\n        public readonly statusText: string,\r\n        public readonly content: string | ArrayBuffer) {\r\n    }\r\n}\r\n\r\nexport abstract class HttpClient {\r\n    public get(url: string): Promise<HttpResponse>;\r\n    public get(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public get(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"GET\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    public post(url: string): Promise<HttpResponse>;\r\n    public post(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public post(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"POST\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    public abstract send(request: HttpRequest): Promise<HttpResponse>;\r\n}\r\n\r\nexport class DefaultHttpClient extends HttpClient {\r\n    private readonly logger: ILogger;\r\n\r\n    constructor(logger: ILogger) {\r\n        super();\r\n        this.logger = logger;\r\n    }\r\n\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n\r\n            xhr.open(request.method, request.url, true);\r\n            xhr.withCredentials = true;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n\r\n            if (request.headers) {\r\n                Object.keys(request.headers)\r\n                    .forEach((header) => xhr.setRequestHeader(header, request.headers[header]));\r\n            }\r\n\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                };\r\n            }\r\n\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                } else {\r\n                    reject(new HttpError(xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n\r\n            xhr.onerror = () => {\r\n                this.logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n\r\n            xhr.ontimeout = () => {\r\n                this.logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n\r\n            xhr.send(request.content || \"\");\r\n        });\r\n    }\r\n}\r\n"]}
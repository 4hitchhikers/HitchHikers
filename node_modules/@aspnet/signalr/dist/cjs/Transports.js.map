{"version":3,"file":"Transports.js","sourceRoot":"","sources":["../../src/Transports.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortController } from \"./AbortController\";\r\nimport { DataReceived, TransportClosed } from \"./Common\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { Arg } from \"./Utils\";\r\n\r\nexport enum TransportType {\r\n    WebSockets,\r\n    ServerSentEvents,\r\n    LongPolling,\r\n}\r\n\r\nexport enum TransferFormat {\r\n    Text = 1,\r\n    Binary,\r\n}\r\n\r\nexport interface ITransport {\r\n    connect(url: string, transferFormat: TransferFormat, connection: IConnection): Promise<void>;\r\n    send(data: any): Promise<void>;\r\n    stop(): Promise<void>;\r\n    onreceive: DataReceived;\r\n    onclose: TransportClosed;\r\n}\r\n\r\nexport class WebSocketTransport implements ITransport {\r\n    private readonly logger: ILogger;\r\n    private readonly accessTokenFactory: () => string;\r\n    private webSocket: WebSocket;\r\n\r\n    constructor(accessTokenFactory: () => string, logger: ILogger) {\r\n        this.logger = logger;\r\n        this.accessTokenFactory = accessTokenFactory || (() => null);\r\n    }\r\n\r\n    public connect(url: string, transferFormat: TransferFormat, connection: IConnection): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        Arg.isRequired(connection, \"connection\");\r\n\r\n        if (typeof (WebSocket) === \"undefined\") {\r\n            throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n        }\r\n\r\n        this.logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting\");\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            const token = this.accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n\r\n            const webSocket = new WebSocket(url);\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n\r\n            webSocket.onopen = (event: Event) => {\r\n                this.logger.log(LogLevel.Information, `WebSocket connected to ${url}`);\r\n                this.webSocket = webSocket;\r\n                resolve();\r\n            };\r\n\r\n            webSocket.onerror = (event: ErrorEvent) => {\r\n                reject(event.error);\r\n            };\r\n\r\n            webSocket.onmessage = (message: MessageEvent) => {\r\n                this.logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data)}.`);\r\n                if (this.onreceive) {\r\n                    this.onreceive(message.data);\r\n                }\r\n            };\r\n\r\n            webSocket.onclose = (event: CloseEvent) => {\r\n                // webSocket will be null if the transport did not start successfully\r\n                if (this.onclose && this.webSocket) {\r\n                    if (event.wasClean === false || event.code !== 1000) {\r\n                        this.onclose(new Error(`Websocket closed with status code: ${event.code} (${event.reason})`));\r\n                    } else {\r\n                        this.onclose();\r\n                    }\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public send(data: any): Promise<void> {\r\n        if (this.webSocket && this.webSocket.readyState === WebSocket.OPEN) {\r\n            this.logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data)}.`);\r\n            this.webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        if (this.webSocket) {\r\n            this.webSocket.close();\r\n            this.webSocket = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public onreceive: DataReceived;\r\n    public onclose: TransportClosed;\r\n}\r\n\r\nexport class ServerSentEventsTransport implements ITransport {\r\n    private readonly httpClient: HttpClient;\r\n    private readonly accessTokenFactory: () => string;\r\n    private readonly logger: ILogger;\r\n    private eventSource: EventSource;\r\n    private url: string;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: () => string, logger: ILogger) {\r\n        this.httpClient = httpClient;\r\n        this.accessTokenFactory = accessTokenFactory || (() => null);\r\n        this.logger = logger;\r\n    }\r\n\r\n    public connect(url: string, transferFormat: TransferFormat, connection: IConnection): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        Arg.isRequired(connection, \"connection\");\r\n\r\n        if (typeof (EventSource) === \"undefined\") {\r\n            throw new Error(\"'EventSource' is not supported in your environment.\");\r\n        }\r\n\r\n        this.logger.log(LogLevel.Trace, \"(SSE transport) Connecting\");\r\n\r\n        this.url = url;\r\n        return new Promise<void>((resolve, reject) => {\r\n            if (transferFormat !== TransferFormat.Text) {\r\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\r\n            }\r\n\r\n            const token = this.accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n\r\n            const eventSource = new EventSource(url, { withCredentials: true });\r\n\r\n            try {\r\n                eventSource.onmessage = (e: MessageEvent) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this.logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data)}.`);\r\n                            this.onreceive(e.data);\r\n                        } catch (error) {\r\n                            if (this.onclose) {\r\n                                this.onclose(error);\r\n                            }\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                eventSource.onerror = (e: any) => {\r\n                    reject(new Error(e.message || \"Error occurred\"));\r\n\r\n                    // don't report an error if the transport did not start successfully\r\n                    if (this.eventSource && this.onclose) {\r\n                        this.onclose(new Error(e.message || \"Error occurred\"));\r\n                    }\r\n                };\r\n\r\n                eventSource.onopen = () => {\r\n                    this.logger.log(LogLevel.Information, `SSE connected to ${this.url}`);\r\n                    this.eventSource = eventSource;\r\n                    // SSE is a text protocol\r\n                    resolve();\r\n                };\r\n            } catch (e) {\r\n                return Promise.reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        return send(this.logger, \"SSE\", this.httpClient, this.url, this.accessTokenFactory, data);\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        if (this.eventSource) {\r\n            this.eventSource.close();\r\n            this.eventSource = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public onreceive: DataReceived;\r\n    public onclose: TransportClosed;\r\n}\r\n\r\nexport class LongPollingTransport implements ITransport {\r\n    private readonly httpClient: HttpClient;\r\n    private readonly accessTokenFactory: () => string;\r\n    private readonly logger: ILogger;\r\n\r\n    private url: string;\r\n    private pollXhr: XMLHttpRequest;\r\n    private pollAbort: AbortController;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: () => string, logger: ILogger) {\r\n        this.httpClient = httpClient;\r\n        this.accessTokenFactory = accessTokenFactory || (() => null);\r\n        this.logger = logger;\r\n        this.pollAbort = new AbortController();\r\n    }\r\n\r\n    public connect(url: string, transferFormat: TransferFormat, connection: IConnection): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        Arg.isRequired(connection, \"connection\");\r\n\r\n        this.url = url;\r\n\r\n        this.logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting\");\r\n\r\n        // Set a flag indicating we have inherent keep-alive in this transport.\r\n        connection.features.inherentKeepAlive = true;\r\n\r\n        if (transferFormat === TransferFormat.Binary && (typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            // This will work if we fix: https://github.com/aspnet/SignalR/issues/742\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n\r\n        this.poll(this.url, transferFormat);\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private async poll(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        const pollOptions: HttpRequest = {\r\n            abortSignal: this.pollAbort.signal,\r\n            headers: {},\r\n            timeout: 90000,\r\n        };\r\n\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        const token = this.accessTokenFactory();\r\n        if (token) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            pollOptions.headers[\"Authorization\"] = `Bearer ${token}`;\r\n        }\r\n\r\n        while (!this.pollAbort.signal.aborted) {\r\n            try {\r\n                const pollUrl = `${url}&_=${Date.now()}`;\r\n                this.logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}`);\r\n                const response = await this.httpClient.get(pollUrl, pollOptions);\r\n                if (response.statusCode === 204) {\r\n                    this.logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server\");\r\n\r\n                    // Poll terminated by server\r\n                    if (this.onclose) {\r\n                        this.onclose();\r\n                    }\r\n                    this.pollAbort.abort();\r\n                } else if (response.statusCode !== 200) {\r\n                    this.logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}`);\r\n\r\n                    // Unexpected status code\r\n                    if (this.onclose) {\r\n                        this.onclose(new HttpError(response.statusText, response.statusCode));\r\n                    }\r\n                    this.pollAbort.abort();\r\n                } else {\r\n                    // Process the response\r\n                    if (response.content) {\r\n                        this.logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content)}.`);\r\n                        if (this.onreceive) {\r\n                            this.onreceive(response.content);\r\n                        }\r\n                    } else {\r\n                        // This is another way timeout manifest.\r\n                        this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                if (e instanceof TimeoutError) {\r\n                    // Ignore timeouts and reissue the poll.\r\n                    this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                } else {\r\n                    // Close the connection with the error as the result.\r\n                    if (this.onclose) {\r\n                        this.onclose(e);\r\n                    }\r\n                    this.pollAbort.abort();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        return send(this.logger, \"LongPolling\", this.httpClient, this.url, this.accessTokenFactory, data);\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this.pollAbort.abort();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public onreceive: DataReceived;\r\n    public onclose: TransportClosed;\r\n}\r\n\r\nfunction getDataDetail(data: any): string {\r\n    let length: string = null;\r\n    if (data instanceof ArrayBuffer) {\r\n        length = `Binary data of length ${data.byteLength}`;\r\n    } else if (typeof data === \"string\") {\r\n        length = `String data of length ${data.length}`;\r\n    }\r\n    return length;\r\n}\r\n\r\nasync function send(logger: ILogger, transportName: string, httpClient: HttpClient, url: string, accessTokenFactory: () => string, content: string | ArrayBuffer): Promise<void> {\r\n    let headers;\r\n    const token = accessTokenFactory();\r\n    if (token) {\r\n        headers = {\r\n            [\"Authorization\"]: `Bearer ${accessTokenFactory()}`,\r\n        };\r\n    }\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) sending data. ${getDataDetail(content)}.`);\r\n\r\n    const response = await httpClient.post(url, {\r\n        content,\r\n        headers,\r\n    });\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) request complete. Response status: ${response.statusCode}.`);\r\n}\r\n"]}